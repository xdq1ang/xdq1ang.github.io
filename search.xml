<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ入门</title>
      <link href="/RabbitMQ/"/>
      <url>/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RabbitMQ架构"><a href="#RabbitMQ架构" class="headerlink" title="RabbitMQ架构"></a>RabbitMQ架构</h1><ul><li><p>channel：操作MQ的工具</p></li><li><p>exchange：路由消息到队列中</p></li><li><p>queue：缓存消息</p></li><li><p>virtual host：虚拟主机，是对queue、exchange等资源的逻辑分组</p></li></ul><p><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028224717422.png" alt="image-20231028224717422"></p><h1 id="RabbitMQ入门"><a href="#RabbitMQ入门" class="headerlink" title="RabbitMQ入门"></a>RabbitMQ入门</h1><p>官方提供了入门教程<a href="https://www.rabbitmq.com/getstarted.html">RabbitMQ Tutorials — RabbitMQ</a></p><ol><li><p>基于队列：</p><ul><li>基本消息队列（BasicQueue）</li><li>工作消息队列（WorkQueue）<br><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028225642364.png"><br><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028225659082.png" alt="image-20231028225659082"></li></ul></li><li><p>发布订阅，根据交换机类型不同分为三种：</p><ul><li>Fanout Exchange：广播</li><li>Direct Exchange：路由</li><li>Topic Exchange：主题</li></ul></li></ol><p><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028230023129.png" alt="image-20231028230023129"></p><p><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028230038035.png" alt="image-20231028230038035"></p><h2 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例</h2><p>基于最基础的消息队列实现，只有三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接收并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><p><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028230649805.png" alt="image-20231028230649805"></p><h3 id="基本消息队列的消息发送流程："><a href="#基本消息队列的消息发送流程：" class="headerlink" title="基本消息队列的消息发送流程："></a>基本消息队列的消息<strong>发送</strong>流程：</h3><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列</li><li>利用channel向队列发送消息</li></ol><h3 id="基本消息队列的消息接收流程："><a href="#基本消息队列的消息接收流程：" class="headerlink" title="基本消息队列的消息接收流程："></a>基本消息队列的消息<strong>接收</strong>流程：</h3><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列（生产者消费者均声明队列，避免队列不存在）</li><li>定义consumer的消费行为handleDelivery()</li><li>利用channel将consumer与队列绑定</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>生产者代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.helloworld;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PublisherTest</span> {<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException {<br>        <span class="hljs-comment">// 1.建立连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">"172.18.195.61"</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">"/"</span>);<br>        factory.setUsername(<span class="hljs-string">"xdqiang"</span>);<br>        factory.setPassword(<span class="hljs-string">"123321"</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 3.创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"simple.queue"</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4.发送消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">"hello, rabbitmq!"</span>;<br>        channel.basicPublish(<span class="hljs-string">""</span>, queueName, <span class="hljs-literal">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">"发送消息成功：【"</span> + message + <span class="hljs-string">"】"</span>);<br><br>        <span class="hljs-comment">// 5.关闭通道和连接</span><br>        channel.close();<br>        connection.close();<br><br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.helloworld;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerTest</span> {<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException {<br>        <span class="hljs-comment">// 1.建立连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">"172.18.195.61"</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">"/"</span>);<br>        factory.setUsername(<span class="hljs-string">"xdqiang"</span>);<br>        factory.setPassword(<span class="hljs-string">"123321"</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 3.创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"simple.queue"</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4.订阅消息</span><br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel){<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope,</span><br><span class="hljs-params">                                       AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException {<br>                <span class="hljs-comment">// 5.处理消息</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body);<br>                System.out.println(<span class="hljs-string">"接收到消息：【"</span> + message + <span class="hljs-string">"】"</span>);<br>            }<br>        });<br>        System.out.println(<span class="hljs-string">"等待接收消息。。。。"</span>);<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ部署指南</title>
      <link href="/MessageQueue/"/>
      <url>/MessageQueue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-单机部署"><a href="#1-单机部署" class="headerlink" title="1.单机部署"></a>1.单机部署</h1><p>我们在Centos7虚拟机中使用Docker来安装。</p><h2 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1.下载镜像"></a>1.1.下载镜像</h2><p>方式一：在线拉取</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull rabbitmq:3-management<br></code></pre></td></tr></tbody></table></figure><p>方式二：从本地加载</p><p>在课前资料已经提供了镜像包：</p><p><img src="/../post-images/MessageQueue/image-20210423191210349-1698500977836-1.png" alt="image-20210423191210349"></p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i mq.tar<br></code></pre></td></tr></tbody></table></figure><h2 id="1-2-安装MQ"><a href="#1-2-安装MQ" class="headerlink" title="1.2.安装MQ"></a>1.2.安装MQ</h2><p>执行下面的命令来运行MQ容器：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br> -e RABBITMQ_DEFAULT_USER=xdqiang \<br> -e RABBITMQ_DEFAULT_PASS=123321 \<br> --name mq \<br> --hostname mq1 \<br> -p 15672:15672 \<br> -p 5672:5672 \<br> -d \<br> rabbitmq:3-management<br></code></pre></td></tr></tbody></table></figure><blockquote><p>运行完成后直接访问localhost:15672发现打不开网页,登录mq容器内执行:rabbitmq-plugins enable rabbitmq_management 后再次访问</p></blockquote><h1 id="2-集群部署"><a href="#2-集群部署" class="headerlink" title="2.集群部署"></a>2.集群部署</h1><p>接下来，我们看看如何安装RabbitMQ的集群。</p><h2 id="2-1-集群分类"><a href="#2-1-集群分类" class="headerlink" title="2.1.集群分类"></a>2.1.集群分类</h2><p>在RabbitMQ的官方文档中，讲述了两种集群的配置方式：</p><ul><li>普通模式：普通模式集群不进行数据同步，每个MQ都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有2个MQ：mq1，和mq2，如果你的消息在mq1，而你连接到了mq2，那么mq2会去mq1拉取消息，然后返回给你。如果mq1宕机，消息就会丢失。</li><li>镜像模式：与普通模式不同，队列会在各个mq的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li></ul><p>我们先来看普通模式集群。</p><h2 id="2-2-设置网络"><a href="#2-2-设置网络" class="headerlink" title="2.2.设置网络"></a>2.2.设置网络</h2><p>首先，我们需要让3台MQ互相知道对方的存在。</p><p>分别在3台机器中，设置 /etc/hosts文件，添加如下内容：</p><figure class="highlight accesslog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.150.101</span> mq1<br><span class="hljs-number">192.168.150.102</span> mq2<br><span class="hljs-number">192.168.150.103</span> mq3<br></code></pre></td></tr></tbody></table></figure><p>并在每台机器上测试，是否可以ping通对方：</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO + Github Pages + 百度主动推送</title>
      <link href="/baidu-seo/"/>
      <url>/baidu-seo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-在百度站长平台添加站点"><a href="#1-在百度站长平台添加站点" class="headerlink" title="1. 在百度站长平台添加站点"></a>1. 在百度站长平台添加站点</h1><p>1.1. 打开<a href="https://ziyuan.baidu.com/site/index#/">站点管理_站长工具_百度搜索资源平台</a>，在用户中心站点管理中添加网站：</p><p><img src="/../post-images/BaiduPush/BaiduPush-01.png"></p><p>1.2. 输入网站域名，一定要清楚自己的域名是<code>https://</code>还是<code>https://www</code>，不确定的话就在浏览器访问一次，看看加载成功后最终的地址。（输错的话后面步骤<code>1.4.验证网站</code>会不通过）</p><p><img src="/../post-images/BaiduPush/BaiduPush-02.png"></p><p>1.3. 站点属性：根据需求，随便选。</p><p><img src="/../post-images/BaiduPush/BaiduPush-03.png"></p><p>1.4. 验证网站</p><p>这里两种验证方式都是同样原理，建议选更简单的<code>文件验证</code>方式。</p><p>点击蓝色<code>下载验证文件</code>按钮，并将下载后的文件复制到HEXO目录中的source文件夹中。</p><p><img src="/../post-images/BaiduPush/BaiduPush-04.png"></p><p><strong>重点：</strong> 在执行<code>hexo g</code> 时，source文件夹中的.html文件会被渲染，渲染后文件内容会发生变化，导致百度验证失败。为了避免渲染，在<code>_config.yml</code>配置文件中添加忽略项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">skip_render:</span>  <span class="hljs-comment"># 跳过渲染</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">baidu_verify_codeva-vCqga8k0Pw.html</span><br></code></pre></td></tr></tbody></table></figure><p>上传文件、修改<code>_config.yml</code>配置后，应该执行以下操作进行部署到github pages：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></tbody></table></figure><p>部署成功后，点击蓝色<code>点击这里</code>，访问刚刚上传的.html验证文件，应该可以正常访问。然后点击<code>完成验证</code>。</p><p><strong>注意：</strong> 如果<code>步骤1.2</code>出错，会验证失败：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">xxx前www.xxx.com使用文件验证<br><br>原因：301网页存在跳转。<br><br>问题分析&amp;解决办法：验证文件、网页必须为200状态码，请检查网站协议头是否选择正确...<br></code></pre></td></tr></tbody></table></figure><p><img src="/../post-images/BaiduPush/BaiduPush-05.png"></p><p>出现此错误时，可以去检查<code>步骤1.2</code>，确认域名为<code>https://</code>还是<code>https://www</code>。</p><p>1.5. 进入<code>普通提交 -&gt; 资源提交 -&gt; API提交</code>查看token值。</p><p><img src="/../post-images/BaiduPush/BaiduPush-06.png"></p><h1 id="2-安装插件hexo-baidu-url-submit"><a href="#2-安装插件hexo-baidu-url-submit" class="headerlink" title="2. 安装插件hexo-baidu-url-submit"></a>2. 安装插件hexo-baidu-url-submit</h1><p>2.1. 在HEXO根目录下执行命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-baidu-url-submit --save<br></code></pre></td></tr></tbody></table></figure><p>2.2. 并在博客配置文件<code>_config.yml</code>中添加以下配置：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">baidu_url_submit:</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 每次提交最新的三个链接</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">xdqiang.cn</span> <span class="hljs-comment"># 在百度站长平台中注册的域名</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">your_token</span> <span class="hljs-comment"># 步骤1.5中的token</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidu_urls.txt</span> <span class="hljs-comment"># 文本文档的地址， 新链接会保存在此文本文档里（hexo-baidu-url-submit插件自动生成）</span><br></code></pre></td></tr></tbody></table></figure><p>2.3. 由于HEXO默认文章路径太深，不利于百度SEO，可以将文章路径(permalink)修改为标题（建议）：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://xdqiang.cn</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing 'index.html' from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing '.html' from permalinks</span><br></code></pre></td></tr></tbody></table></figure><p>2.4. 在deployer中添加<code>baidu_url_submitter</code>:</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xxxxxx/xxxxxxx.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">baidu_url_submittertter</span><br></code></pre></td></tr></tbody></table></figure><p>2.5. 修改完配置后，执行以下命令部署博客：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SEO </tag>
            
            <tag> 百度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NGAP接口概述</title>
      <link href="/NGAP/"/>
      <url>/NGAP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、NGAP-N2-接口协议概述"><a href="#一、NGAP-N2-接口协议概述" class="headerlink" title="一、NGAP(N2)接口协议概述"></a>一、NGAP(N2)接口协议概述</h1><p>N2的传输层是SCTP，上层用户是5G NAS</p><ul><li><p>MM</p></li><li><p>SM</p></li></ul><p>NGAP具备以下能力：</p><ul><li><p>支持建立、保持和释放PDU会话的NG-RAN侧的能力</p></li><li><p>支持intra-RAT和inter-RAT的切换</p></li><li><p>传递UE和AMF之间的NAS信令</p></li><li><p>用户数据报文的资源预留机制</p></li><li><p>能在协议栈上区分出不同用户，并完成UE相关的信令管理</p><p><img src="/../post-images/NGAP/NGAP-01.png"></p></li></ul><h1 id="二、NGAP接口流程分类"><a href="#二、NGAP接口流程分类" class="headerlink" title="二、NGAP接口流程分类"></a>二、NGAP接口流程分类</h1><h2 id="按照是否和UE相关分类"><a href="#按照是否和UE相关分类" class="headerlink" title="按照是否和UE相关分类"></a>按照是否和UE相关分类</h2><ul><li><p>与UE相关的流程，重要的有：</p><ul><li><p>PDU会话管理流程</p></li><li><p>UE上下文管理流程</p></li><li><p>UE移动性管理流程</p></li><li><p>寻呼流程</p></li><li><p>NAS消息传送流程</p></li></ul></li><li><p>与UE无关的流程，重要的有：</p><ul><li>N2 Setup</li></ul><p><img src="/../post-images/NGAP/NGAP-02.png"></p></li></ul><h2 id="按照是否需要应答分类"><a href="#按照是否需要应答分类" class="headerlink" title="按照是否需要应答分类"></a>按照是否需要应答分类</h2><ul><li><p>需要应答的流程有：</p><p><img src="/../post-images/NGAP/NGAP-03.png"></p><p><img src="/../post-images/NGAP/NGAP-04.png"></p></li><li><p>不需要应答的流程有（大部分是UE无关的流程）：</p><p><img src="/../post-images/NGAP/NGAP-05.png"></p></li></ul><h1 id="三、常见N2接口流程业务串联"><a href="#三、常见N2接口流程业务串联" class="headerlink" title="三、常见N2接口流程业务串联"></a>三、常见N2接口流程业务串联</h1><h2 id="PDU会话建立流程"><a href="#PDU会话建立流程" class="headerlink" title="PDU会话建立流程"></a>PDU会话建立流程</h2><ol><li><p>Step 1：在UE还没来之前，gNB要和AMF池组中所有AMF建立N2关联</p><p>用到的是NG Setup流程，该流程中gNB会和所有AMF建立SCTP偶联，并获取AMF的权重等参数，用于后续的AMF选择。NG Setup流程包括：</p><ul><li><p>NG Setup Request</p></li><li><p>NG Setup Response</p></li></ul><p><img src="/../post-images/NGAP/NGAP-06.png"></p></li><li><p>Step 2：NG建链后即可为UE服务。UE发起注册流程，gNB配合AMF建立UE的上下文（包括允许的NSSAI、GUAMI、UE安全能力、移动性限制列表等参数）。涉及的消息包括：</p><ul><li><p>Initial UE Message</p></li><li><p>UPLINK NAS TRANSPORT</p></li><li><p>DOWNLINK NAS TRANSPORT</p></li><li><p>initial Context Setup Request</p></li><li><p>initial Context Setup Response</p></li></ul><p><img src="/../post-images/NGAP/NGAP-07.png"></p></li><li><p>Step 3：UE发起PDU会话建立流程。gNB根据网络侧的要求，为UE分配和这个PDU会话及Qos Flow相关的资源（如DRB）。涉及的流程有：</p><ul><li><p>PDU Session Resource Setup Request</p></li><li><p>PDU Session Resource Setup Response</p></li><li><p>UPLINK NAS TRANSPORT</p></li><li><p>DOWNLINK NAS TRANSPORT</p></li></ul><p><img src="/../post-images/NGAP/NGAP-08.png"></p></li><li><p>PDU会话建立后常见的N2流程，如：</p><ul><li><p>移动到其他gNB，触发N2或Xn切换流程；</p></li><li><p>不上网了，释放PDU会话，触发PDU会话资源释放流程；</p></li><li><p>空闲状态下有下行数据到达，触发Paging（寻呼）流程；</p></li><li><p>网络侧决定调整UE的Qos或其他参数，触发PDU会话资源修改</p></li><li><p>其他辅助和管理（OAM）流程。</p></li></ul></li></ol><h1 id="四、附录-N2典型流程举例"><a href="#四、附录-N2典型流程举例" class="headerlink" title="四、附录: N2典型流程举例"></a>四、附录: N2典型流程举例</h1><h2 id="PDU会话管理流程"><a href="#PDU会话管理流程" class="headerlink" title="PDU会话管理流程"></a>PDU会话管理流程</h2><ol><li><p>PDU会话管理流程为某个PDU会话的特定Qos Flow分配Uu和N3口的资源，并且针对该UE建立相应的DRB</p></li><li><p>需要注意，消息是发给AMF，但是因为和PDU会话相关，都是发给SMF处理的</p><p><img src="/../post-images/NGAP/NGAP-09.png"></p></li><li><p>PDU会话管理流程通常不单独出现，而作为一个大流程的一部分。例如PDU会话资源建立流程，就是PDU会话建立流程的一部分。摘取相关的部分如下：</p><p><img src="/../post-images/NGAP/NGAP-10.png"></p></li></ol><h2 id="UE上下文管理流程"><a href="#UE上下文管理流程" class="headerlink" title="UE上下文管理流程"></a>UE上下文管理流程</h2><p><img src="/../post-images/NGAP/NGAP-11.png"></p><h2 id="UE移动性管理流程"><a href="#UE移动性管理流程" class="headerlink" title="UE移动性管理流程"></a>UE移动性管理流程</h2><p><img src="/../post-images/NGAP/NGAP-12.png"></p><h2 id="寻呼流程"><a href="#寻呼流程" class="headerlink" title="寻呼流程"></a>寻呼流程</h2><p><img src="/../post-images/NGAP/NGAP-13.png"></p><h2 id="NAS消息传送流程"><a href="#NAS消息传送流程" class="headerlink" title="NAS消息传送流程"></a>NAS消息传送流程</h2><p><img src="/../post-images/NGAP/NGAP-14.png"></p><h2 id="接口管理流程"><a href="#接口管理流程" class="headerlink" title="接口管理流程"></a>接口管理流程</h2><p><img src="/../post-images/NGAP/NGAP-15.png"></p><h2 id="配置传递流程"><a href="#配置传递流程" class="headerlink" title="配置传递流程"></a>配置传递流程</h2><p><img src="/../post-images/NGAP/NGAP-16.png"></p><h2 id="警报消息传送流程"><a href="#警报消息传送流程" class="headerlink" title="警报消息传送流程"></a>警报消息传送流程</h2><p><img src="/../post-images/NGAP/NGAP-17.png"></p><h2 id="NRPPa传送流程"><a href="#NRPPa传送流程" class="headerlink" title="NRPPa传送流程"></a>NRPPa传送流程</h2><p><img src="/../post-images/NGAP/NGAP-18.png"></p><h2 id="Trace（跟踪）流程"><a href="#Trace（跟踪）流程" class="headerlink" title="Trace（跟踪）流程"></a>Trace（跟踪）流程</h2><p><img src="/../post-images/NGAP/NGAP-19.png"></p><h2 id="位置报告流程"><a href="#位置报告流程" class="headerlink" title="位置报告流程"></a>位置报告流程</h2><p><img src="/../post-images/NGAP/NGAP-20.png"></p><h2 id="UE-TNLA绑定流程"><a href="#UE-TNLA绑定流程" class="headerlink" title="UE TNLA绑定流程"></a>UE TNLA绑定流程</h2><p><img src="/../post-images/NGAP/NGAP-21.png"></p><h2 id="UE无线能力管理流程"><a href="#UE无线能力管理流程" class="headerlink" title="UE无线能力管理流程"></a>UE无线能力管理流程</h2><p><img src="/../post-images/NGAP/NGAP-22.png"></p><h2 id="Secondary-RAT数据使用量上报流程"><a href="#Secondary-RAT数据使用量上报流程" class="headerlink" title="Secondary RAT数据使用量上报流程"></a>Secondary RAT数据使用量上报流程</h2><p><img src="/../post-images/NGAP/NGAP-23.png"></p><h2 id="NGAP典型消息举例"><a href="#NGAP典型消息举例" class="headerlink" title="NGAP典型消息举例"></a>NGAP典型消息举例</h2><p><img src="/../post-images/NGAP/NGAP-24.png"></p><p><img src="/../post-images/NGAP/NGAP-25.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 5GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAI开源核心网部署</title>
      <link href="/oai-kai-yuan-he-xin-wang-bu-shu/"/>
      <url>/oai-kai-yuan-he-xin-wang-bu-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="OAI概述"><a href="#OAI概述" class="headerlink" title="OAI概述"></a>OAI概述</h1><p>OAI-5G核心网络（CN）项目组的目标是提供具有丰富功能集的符合3GPP标准的5G独立（SA）CN实现。OAI 5G CN以灵活的方式设计和实现，可以轻松适应多样化5G用例的需求。OAI 5G CN组件的所有功能都通过专业测试人员、商业gNB（带有COTS UE）和开源RAN模拟器进行持续测试。<br><img src="/../post-images/OAI/1697732953367.png"></p><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull ubuntu:bionic<br><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">8</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><h1 id="二、拉取Docker镜像"><a href="#二、拉取Docker镜像" class="headerlink" title="二、拉取Docker镜像"></a>二、拉取Docker镜像</h1><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-amf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-nrf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-spgwu-tiny:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-smf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-udr:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-udm:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-ausf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-upf-vpp:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-nssf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-pcf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-nef:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/trf-gen-cn5g:latest<br></code></pre></td></tr></tbody></table></figure><h1 id="三、克隆oai-cn5g-fed项目源代码"><a href="#三、克隆oai-cn5g-fed项目源代码" class="headerlink" title="三、克隆oai-cn5g-fed项目源代码"></a>三、克隆oai-cn5g-fed项目源代码</h1><ol><li><p>拉取源代码<br><code>git clone --branch v1.5.0 https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed.git</code></p></li><li><p>同步git子模块<br><code>cd oai-cn5g-fed</code><br><code>./scripts/syncComponents.sh</code></p><h1 id="四、创建网桥"><a href="#四、创建网桥" class="headerlink" title="四、创建网桥"></a>四、创建网桥</h1></li><li><p>创建<br><code>docker network create --driver=bridge --subnet=192.168.70.128/26 -o          "com.docker.network.bridge.name"="demo-oai" demo-oai-public-net</code></p></li><li><p>查看<br><code> ifconfig demo-oai</code><br><code>docker network ls</code><br>注意：删除网桥：<br><code>docker network rm demo-oai-public-net</code></p><h1 id="五、包转发配置"><a href="#五、包转发配置" class="headerlink" title="五、包转发配置"></a>五、包转发配置</h1><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo sysctl net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.all</span>.forwarding=<span class="hljs-number">1</span><br>sudo iptables -P FORWARD ACCEPT<br></code></pre></td></tr></tbody></table></figure><h1 id="七、-模拟基站和终端接入测试"><a href="#七、-模拟基站和终端接入测试" class="headerlink" title="七、 模拟基站和终端接入测试"></a>七、 模拟基站和终端接入测试</h1></li><li><p>拉取ueransim容器镜像<br><code>docker pull rohankharade/ueransim</code><br><code>docker image tag rohankharade/ueransim:latest ueransim:latest</code></p></li><li><p>5GC部署<br><code>cd oai-cn5g-fed/docker-compose</code><br><code> docker-compose -f docker-compose-basic-vpp-nrf.yaml up -d</code><br>如果报错，请删除现有容器：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 网络修剪</span><br>docker network prune<br><span class="hljs-comment"># 查看现有容器</span><br>docker container <span class="hljs-built_in">ls</span> <span class="hljs-literal">-a</span><br><span class="hljs-comment"># 删除所有容器</span><br>docker <span class="hljs-built_in">rm</span> <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-qa</span>) 或者 docker system prune<br></code></pre></td></tr></tbody></table></figure></li><li><p>启动UERANSIM<br><code>docker-compose -f docker-compose-ueransim-vpp.yaml up -d</code></p></li><li><p>取消部署<br><code>docker-compose -f docker-compose-ueransim-vpp.yaml down</code><br><code>python3 ./core-network.py --type stop-basic-vpp --scenario 1</code></p><h1 id="八、其他常用指令"><a href="#八、其他常用指令" class="headerlink" title="八、其他常用指令"></a>八、其他常用指令</h1><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 停止所有容器</span><br>docker stop <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span> <span class="hljs-literal">-q</span>)<br><span class="hljs-comment"># 抓包</span><br>tshark <span class="hljs-literal">-i</span> demo<span class="hljs-literal">-oai</span> <span class="hljs-operator">-f</span> <span class="hljs-string">"not arp and not port 53 and not host archive.ubuntu.com and not host security.ubuntu.com"</span> <span class="hljs-literal">-w</span> logs.pcap<br>sudo tcpdump <span class="hljs-literal">-i</span> demo<span class="hljs-literal">-oai</span> <span class="hljs-literal">-w</span> logs.pcap<br></code></pre></td></tr></tbody></table></figure><h1 id="九、OAI网元IP"><a href="#九、OAI网元IP" class="headerlink" title="九、OAI网元IP"></a>九、OAI网元IP</h1><table><thead><tr><th>Container</th><th>Ip-address</th></tr></thead><tbody><tr><td>mysql</td><td>192.168.70.131</td></tr><tr><td>oai-amf</td><td>192.168.70.132</td></tr><tr><td>oai-smf</td><td>192.168.70.133</td></tr><tr><td>oai-nrf</td><td>192.168.70.130</td></tr><tr><td>oai-spgwu</td><td>192.168.70.134</td></tr><tr><td>oai-ext-dn</td><td>192.168.70.135</td></tr></tbody></table></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 5GC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
