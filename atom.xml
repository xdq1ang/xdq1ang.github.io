<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoreNotes</title>
  
  
  <link href="https://www.xdqiang.cn/atom.xml" rel="self"/>
  
  <link href="https://www.xdqiang.cn/"/>
  <updated>2024-01-14T12:07:11.674Z</updated>
  <id>https://www.xdqiang.cn/</id>
  
  <author>
    <name>xdqiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装elasticsearch</title>
    <link href="https://www.xdqiang.cn/%E5%AE%89%E8%A3%85elasticsearch/"/>
    <id>https://www.xdqiang.cn/%E5%AE%89%E8%A3%85elasticsearch/</id>
    <published>2024-01-14T12:03:00.000Z</published>
    <updated>2024-01-14T12:07:11.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h1><h1 id="1-部署单点es"><a href="#1-部署单点es" class="headerlink" title="1.部署单点es"></a>1.部署单点es</h1><h2 id="1-1-创建网络"><a href="#1-1-创建网络" class="headerlink" title="1.1.创建网络"></a>1.1.创建网络</h2><p>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker network create es-net<br></code></pre></td></tr></tbody></table></figure><h2 id="1-2-加载镜像"><a href="#1-2-加载镜像" class="headerlink" title="1.2.加载镜像"></a>1.2.加载镜像</h2><p>这里我们采用elasticsearch的7.12.1版本的镜像，这个镜像体积非常大，接近1G。不建议大家自己pull。</p><p>课前资料提供了镜像的tar包：</p><p><img src="/assets/image-20210510165308064.png" alt="image-20210510165308064"></p><p>大家将其上传到虚拟机中，然后运行命令加载即可：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 导入数据</span><br>docker load -i es.tar<br></code></pre></td></tr></tbody></table></figure><p>同理还有<code>kibana</code>的tar包也需要这样做。</p><h2 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h2><p>运行docker命令，部署单点es：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>--name es \<br>    -e <span class="hljs-string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span> \<br>    -e <span class="hljs-string">"discovery.type=single-node"</span> \<br>    -v es-data:/usr/share/elasticsearch/data \<br>    -v es-plugins:/usr/share/elasticsearch/plugins \<br>    --privileged \<br>    --network es-net \<br>    -p 9200:9200 \<br>    -p 9300:9300 \<br>elasticsearch:7.12.1<br></code></pre></td></tr></tbody></table></figure><p>命令解释：</p><ul><li><code>-e "cluster.name=es-docker-cluster"</code>：设置集群名称</li><li><code>-e "http.host=0.0.0.0"</code>：监听的地址，可以外网访问</li><li><code>-e "ES_JAVA_OPTS=-Xms512m -Xmx512m"</code>：内存大小</li><li><code>-e "discovery.type=single-node"</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置</li></ul><p>在浏览器中输入：<a href="http://192.168.150.101:9200/">http://192.168.150.101:9200</a> 即可看到elasticsearch的响应结果：</p><p><img src="/assets/image-20210506101053676.png" alt="image-20210506101053676"></p><h1 id="2-部署kibana"><a href="#2-部署kibana" class="headerlink" title="2.部署kibana"></a>2.部署kibana</h1><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。</p><h2 id="2-1-部署"><a href="#2-1-部署" class="headerlink" title="2.1.部署"></a>2.1.部署</h2><p>运行docker命令，部署kibana</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>--name kibana \<br>-e ELASTICSEARCH_HOSTS=http://es:9200 \<br>--network=es-net \<br>-p 5601:5601  \<br>kibana:7.12.1<br></code></pre></td></tr></tbody></table></figure><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200"</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><p>kibana启动一般比较慢，需要多等待一会，可以通过命令：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs -f kibana<br></code></pre></td></tr></tbody></table></figure><p>查看运行日志，当查看到下面的日志，说明成功：</p><p><img src="/assets/image-20210109105135812.png" alt="image-20210109105135812"></p><p>此时，在浏览器输入地址访问：<a href="http://192.168.150.101:5601，即可看到结果">http://192.168.150.101:5601，即可看到结果</a></p><h2 id="2-2-DevTools"><a href="#2-2-DevTools" class="headerlink" title="2.2.DevTools"></a>2.2.DevTools</h2><p>kibana中提供了一个DevTools界面：</p><p><img src="/assets/image-20210506102630393.png" alt="image-20210506102630393"></p><p>这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。</p><h1 id="3-安装IK分词器"><a href="#3-安装IK分词器" class="headerlink" title="3.安装IK分词器"></a>3.安装IK分词器</h1><h2 id="3-1-在线安装ik插件（较慢）"><a href="#3-1-在线安装ik插件（较慢）" class="headerlink" title="3.1.在线安装ik插件（较慢）"></a>3.1.在线安装ik插件（较慢）</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器内部</span><br>docker exec -it elasticsearch /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在线下载并安装</span><br>./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">退出</span><br>exit<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启容器</span><br>docker restart elasticsearch<br></code></pre></td></tr></tbody></table></figure><h2 id="3-2-离线安装ik插件（推荐）"><a href="#3-2-离线安装ik插件（推荐）" class="headerlink" title="3.2.离线安装ik插件（推荐）"></a>3.2.离线安装ik插件（推荐）</h2><h3 id="1）查看数据卷目录"><a href="#1）查看数据卷目录" class="headerlink" title="1）查看数据卷目录"></a>1）查看数据卷目录</h3><p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume inspect es-plugins<br></code></pre></td></tr></tbody></table></figure><p>显示结果：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"CreatedAt"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2022-05-06T10:06:34+08:00"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"Driver"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"local"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"Labels"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"Mountpoint"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/var/lib/docker/volumes/es-plugins/_data"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"Name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"es-plugins"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"Options"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"Scope"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"local"</span><br>    <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></tbody></table></figure><p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中。</p><h3 id="2）解压缩分词器安装包"><a href="#2）解压缩分词器安装包" class="headerlink" title="2）解压缩分词器安装包"></a>2）解压缩分词器安装包</h3><p>下面我们需要把课前资料中的ik分词器解压缩，重命名为ik</p><p><img src="/assets/image-20210506110249144.png" alt="image-20210506110249144"></p><h3 id="3）上传到es容器的插件数据卷中"><a href="#3）上传到es容器的插件数据卷中" class="headerlink" title="3）上传到es容器的插件数据卷中"></a>3）上传到es容器的插件数据卷中</h3><p>也就是<code>/var/lib/docker/volumes/es-plugins/_data </code>：</p><p><img src="/assets/image-20210506110704293.png" alt="image-20210506110704293"></p><h3 id="4）重启容器"><a href="#4）重启容器" class="headerlink" title="4）重启容器"></a>4）重启容器</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">4、重启容器</span><br>docker restart es<br></code></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看es日志</span><br>docker logs -f es<br></code></pre></td></tr></tbody></table></figure><h3 id="5）测试："><a href="#5）测试：" class="headerlink" title="5）测试："></a>5）测试：</h3><p>IK分词器包含两种模式：</p><ul><li><p><code>ik_smart</code>：最少切分</p></li><li><p><code>ik_max_word</code>：最细切分</p></li></ul><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_analyze<br><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"analyzer"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ik_max_word"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"text"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"黑马程序员学习java太棒了"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"tokens"</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"黑马"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"CN_WORD"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"程序员"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"CN_WORD"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"程序"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"CN_WORD"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"员"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"CN_CHAR"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"学习"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"CN_WORD"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"java"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"ENGLISH"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"太棒了"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"CN_WORD"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"太棒"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">13</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"CN_WORD"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"token"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"了"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"start_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">13</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"end_offset"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"type"</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">"CN_CHAR"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"position"</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="3-3-扩展词词典"><a href="#3-3-扩展词词典" class="headerlink" title="3.3 扩展词词典"></a>3.3 扩展词词典</h2><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“奥力给”，“传智播客” 等。</p><p>所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能。</p><p>1）打开IK分词器config目录：</p><p><img src="/assets/image-20210506112225508.png" alt="image-20210506112225508"></p><p>2）在IKAnalyzer.cfg.xml配置文件内容添加：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">"http://java.sun.com/dtd/properties.dtd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"ext_dict"</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>3）新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">传智播客</span><br><span class="hljs-attr">奥力给</span><br></code></pre></td></tr></tbody></table></figure><p>4）重启elasticsearch </p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker restart es<br><br><span class="hljs-comment"># 查看 日志</span><br>docker logs -f elasticsearch<br></code></pre></td></tr></tbody></table></figure><p><img src="/assets/image-20201115230900504.png" alt="image-20201115230900504"></p><p>日志中已经成功加载ext.dic配置文件</p><p>5）测试效果：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_analyze<br><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"analyzer"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ik_max_word"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"text"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"传智播客Java就业超过90%,奥力给！"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h2 id="3-4-停用词词典"><a href="#3-4-停用词词典" class="headerlink" title="3.4 停用词词典"></a>3.4 停用词词典</h2><p>在互联网项目中，在网络间传输的速度很快，所以很多语言是不允许在网络上传递的，如：关于宗教、政治等敏感词语，那么我们在搜索时也应该忽略当前词汇。</p><p>IK分词器也提供了强大的停用词功能，让我们在索引时就直接忽略当前的停用词汇表中的内容。</p><p>1）IKAnalyzer.cfg.xml配置文件内容添加：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">"http://java.sun.com/dtd/properties.dtd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"ext_dict"</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"ext_stopwords"</span>&gt;</span>stopword.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>3）在 stopword.dic 添加停用词</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">习大大</span><br></code></pre></td></tr></tbody></table></figure><p>4）重启elasticsearch </p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 重启服务</span><br>docker restart elasticsearch<br>docker restart kibana<br><br><span class="hljs-comment"># 查看 日志</span><br>docker logs -f elasticsearch<br></code></pre></td></tr></tbody></table></figure><p>日志中已经成功加载stopword.dic配置文件</p><p>5）测试效果：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_analyze<br><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"analyzer"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ik_max_word"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"text"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"传智播客Java就业率超过95%,习大大都点赞,奥力给！"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h1 id="4-部署es集群"><a href="#4-部署es集群" class="headerlink" title="4.部署es集群"></a>4.部署es集群</h1><p>部署es集群可以直接使用docker-compose来完成，不过要求你的Linux虚拟机至少有<strong>4G</strong>的内存空间</p><p>首先编写一个docker-compose文件，内容如下：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs sh">version: <span class="hljs-string">'2.2'</span><br>services:<br>  es01:<br>    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1<br>    container_name: es01<br>    environment:<br>      - node.name=es01<br>      - cluster.name=es-docker-cluster<br>      - discovery.seed_hosts=es02,es03<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - bootstrap.memory_lock=<span class="hljs-literal">true</span><br>      - <span class="hljs-string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span><br>    ulimits:<br>      memlock:<br>        soft: -1<br>        hard: -1<br>    volumes:<br>      - data01:/usr/share/elasticsearch/data<br>    ports:<br>      - 9200:9200<br>    networks:<br>      - elastic<br>  es02:<br>    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1<br>    container_name: es02<br>    environment:<br>      - node.name=es02<br>      - cluster.name=es-docker-cluster<br>      - discovery.seed_hosts=es01,es03<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - bootstrap.memory_lock=<span class="hljs-literal">true</span><br>      - <span class="hljs-string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span><br>    ulimits:<br>      memlock:<br>        soft: -1<br>        hard: -1<br>    volumes:<br>      - data02:/usr/share/elasticsearch/data<br>    networks:<br>      - elastic<br>  es03:<br>    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1<br>    container_name: es03<br>    environment:<br>      - node.name=es03<br>      - cluster.name=es-docker-cluster<br>      - discovery.seed_hosts=es01,es02<br>      - cluster.initial_master_nodes=es01,es02,es03<br>      - bootstrap.memory_lock=<span class="hljs-literal">true</span><br>      - <span class="hljs-string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span><br>    ulimits:<br>      memlock:<br>        soft: -1<br>        hard: -1<br>    volumes:<br>      - data03:/usr/share/elasticsearch/data<br>    networks:<br>      - elastic<br><br>volumes:<br>  data01:<br>    driver: <span class="hljs-built_in">local</span><br>  data02:<br>    driver: <span class="hljs-built_in">local</span><br>  data03:<br>    driver: <span class="hljs-built_in">local</span><br><br>networks:<br>  elastic:<br>    driver: bridge<br></code></pre></td></tr></tbody></table></figure><p>Run <code>docker-compose</code> to bring up the cluster:</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose up<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://www.xdqiang.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>SpringAMQP</title>
    <link href="https://www.xdqiang.cn/SpringAMQP/"/>
    <id>https://www.xdqiang.cn/SpringAMQP/</id>
    <published>2023-11-08T12:49:00.000Z</published>
    <updated>2023-12-02T10:10:01.081Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、SpringAMQP基本流程"><a href="#一、SpringAMQP基本流程" class="headerlink" title="一、SpringAMQP基本流程"></a>一、SpringAMQP基本流程</h2><p>使用SpringAMQP实现HelloWorld中的基础消息队列功能</p><p>流程如下：</p><ol><li>在父工程中引入spring-amqp的依赖；</li><li>在publisher服务中利用RabbitTemplate发送消息到simple.queue这个队列；</li><li>在consumer服务中编写消费逻辑，绑定simple.queue这个队列；</li></ol><h3 id="1-在父工程中添加依赖"><a href="#1-在父工程中添加依赖" class="headerlink" title="1. 在父工程中添加依赖"></a>1. 在父工程中添加依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="2-生产者代码"><a href="#2-生产者代码" class="headerlink" title="2. 生产者代码"></a>2. 生产者代码</h3><p>在配置文件中添加以下配置</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">172.18</span><span class="hljs-number">.195</span><span class="hljs-number">.61</span>  <span class="hljs-comment"># rabbitMQ的ip地址</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">xdqiang</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></tbody></table></figure><p>消息发布代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.spring;<br><br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage2SimpleQueue</span><span class="hljs-params">()</span>{<br>        <span class="hljs-comment">// 不会自动创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"simple.queue"</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">"hello, spring amqp"</span>;<br>        rabbitTemplate.convertAndSend(queueName, message);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="3-消费者代码"><a href="#3-消费者代码" class="headerlink" title="3. 消费者代码"></a>3. 消费者代码</h3><p>在配置文件中添加以下配置</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">172.18</span><span class="hljs-number">.195</span><span class="hljs-number">.61</span>  <span class="hljs-comment"># rabbitMQ的ip地址</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">xdqiang</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></tbody></table></figure><p>消息监听代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> {<br>    <span class="hljs-meta">@RabbitListener(queues = "simple.queue")</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueue</span><span class="hljs-params">(String msg)</span>{<br>        System.out.println(<span class="hljs-string">"消费者接收到simple.queue的消息：【"</span> + msg + <span class="hljs-string">"】"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><p>点击运行启动工程，消息监听会一直运行</p><p><img src="/../post-images/SpringAMQP/image-20231108214324031.png" alt="image-20231108214324031"></p><p>收到消息</p><p><img src="/../post-images/SpringAMQP/image-20231108214451675.png" alt="image-20231108214451675"></p><h2 id="二、SpringAMQP实现一个队列绑定多个消费者"><a href="#二、SpringAMQP实现一个队列绑定多个消费者" class="headerlink" title="二、SpringAMQP实现一个队列绑定多个消费者"></a>二、SpringAMQP实现一个队列绑定多个消费者</h2><p>基本思路如下：</p><ol><li>在publisher服务中定义测试方法，每秒生成50条消息，发送到simple.queue；</li><li>在consumer服务中定义两个消息监听者，监听simple.queue队列；</li><li>消费者1每秒处理50条消息，消费者2每秒处理10条消息；</li></ol><h3 id="1-生产者代码"><a href="#1-生产者代码" class="headerlink" title="1. 生产者代码"></a>1. 生产者代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.spring;<br><br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage2WorkQueue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException{<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) {<br>            <span class="hljs-comment">// 不会自动创建队列</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"simple.queue"</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">"message___"</span> + i;<br>            rabbitTemplate.convertAndSend(queueName, message);<br>            Thread.sleep(<span class="hljs-number">20</span>);<br>        }<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-消费者代码"><a href="#2-消费者代码" class="headerlink" title="2. 消费者代码"></a>2. 消费者代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> {<br><br>    <span class="hljs-meta">@RabbitListener(queues = "simple.queue")</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException {<br>        System.out.println(<span class="hljs-string">"消费者1接收到simple.queue的消息：【"</span> + msg + <span class="hljs-string">"】"</span> + LocalTime.now());<br>        Thread.sleep(<span class="hljs-number">20</span>);<br>    }<br><br><br>    <span class="hljs-meta">@RabbitListener(queues = "simple.queue")</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException {<br>        System.err.println(<span class="hljs-string">"消费者2接收到simple.queue的消息：【"</span> + msg + <span class="hljs-string">"】"</span> + LocalTime.now());<br>        Thread.sleep(<span class="hljs-number">200</span>);<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><p>注意：消费者如果一次性取太多，会拖慢整体消费速度，此时可以将 prefetch:设置为1（能者多劳）</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">pattern:</span><br>    <span class="hljs-attr">dateformat:</span> <span class="hljs-string">MM-dd</span> <span class="hljs-string">HH:mm:ss:SSS</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">172.18</span><span class="hljs-number">.195</span><span class="hljs-number">.61</span>  <span class="hljs-comment"># rabbitMQ的ip地址</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">xdqiang</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#每次只取一条消息，处理完才能取下一条</span><br></code></pre></td></tr></tbody></table></figure><h2 id="三、Exchange"><a href="#三、Exchange" class="headerlink" title="三、Exchange"></a>三、Exchange</h2><p>Exchange的作用：</p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败则消息丢失</li><li>FanoutExchange会将消息路由到每个与之绑定地队列</li></ul><p>Exchange地类型</p><ul><li>FanoutExchange</li><li>DirectExchange</li><li>TpoicExchange</li></ul><h3 id="1-利用SpringAMQP演示FanoutExchange的使用"><a href="#1-利用SpringAMQP演示FanoutExchange的使用" class="headerlink" title="1. 利用SpringAMQP演示FanoutExchange的使用"></a>1. 利用SpringAMQP演示FanoutExchange的使用</h3><p>FanoutExchange将消息路由到每个绑定地队列，基本思路如下：</p><ol><li>在consumer服务中，利用代码申明队列、交换机，并将两者绑定；</li><li>在consumer服务中，编写两个消费者方法，分别监听fanout.queue1和fanout.quque2；</li><li>在publisher中编写测试方法，向itcast.fanout发送消息；</li></ol><p><img src="/../post-images/SpringAMQP/image-20231202153422441.png" alt="image-20231202153422441"></p><h4 id="1-在consumer服务中，利用代码申明队列、交换机，并将两者绑定"><a href="#1-在consumer服务中，利用代码申明队列、交换机，并将两者绑定" class="headerlink" title="(1) 在consumer服务中，利用代码申明队列、交换机，并将两者绑定"></a>(1) 在consumer服务中，利用代码申明队列、交换机，并将两者绑定</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.config;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.FanoutExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FanoutConfig</span> {<br>    <span class="hljs-comment">// itcat.fanout</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title function_">fanoutExchange</span><span class="hljs-params">()</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FanoutExchange</span>(<span class="hljs-string">"itcast.fanout"</span>);<br>    }<br>    <span class="hljs-comment">// fanout.queue1</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue1</span><span class="hljs-params">()</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">"fanout.queue1"</span>);<br>    }<br>    <span class="hljs-comment">// fanout.queue2</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue2</span><span class="hljs-params">()</span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">"fanout.queue2"</span>);<br>    }<br>    <span class="hljs-comment">// 绑定队列1到交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">fanoutBinding1</span><span class="hljs-params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>{<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);<br>    }<br>    <span class="hljs-comment">// 绑定队列2到交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">fanoutBinding2</span><span class="hljs-params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>{<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="2-在consumer服务中，编写两个消费者方法，分别监听fanout-queue1和fanout-quque2"><a href="#2-在consumer服务中，编写两个消费者方法，分别监听fanout-queue1和fanout-quque2" class="headerlink" title="(2) 在consumer服务中，编写两个消费者方法，分别监听fanout.queue1和fanout.quque2"></a>(2) 在consumer服务中，编写两个消费者方法，分别监听fanout.queue1和fanout.quque2</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> {<br>    <span class="hljs-meta">@RabbitListener(queues = "fanout.queue1")</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue1</span><span class="hljs-params">(String msg)</span>{<br>        System.out.println(<span class="hljs-string">"消费之接收到了fanout.queue1的消息：【"</span> + msg + <span class="hljs-string">"】"</span>);<br>    }<br><br>    <span class="hljs-meta">@RabbitListener(queues = "fanout.queue2")</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue2</span><span class="hljs-params">(String msg)</span>{<br>        System.out.println(<span class="hljs-string">"消费之接收到了fanout.queue2的消息：【"</span> + msg + <span class="hljs-string">"】"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="3-在publisher中编写测试方法，向itcast-fanout发送消息"><a href="#3-在publisher中编写测试方法，向itcast-fanout发送消息" class="headerlink" title="(3) 在publisher中编写测试方法，向itcast.fanout发送消息"></a>(3) 在publisher中编写测试方法，向itcast.fanout发送消息</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.spring;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> {<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendFanoutExchange</span><span class="hljs-params">()</span>{<br>        <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"itcast.fanout"</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">"hello, every one"</span>;<br>        rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">""</span>, message);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-利用SpringAMQP演示DirectExchange的使用"><a href="#2-利用SpringAMQP演示DirectExchange的使用" class="headerlink" title="2. 利用SpringAMQP演示DirectExchange的使用"></a>2. 利用SpringAMQP演示DirectExchange的使用</h3><p>DirectExchange会将收到的消息根据规则路由到指定的Queue，因此称为路由模式（routes）</p><p><img src="/../post-images/SpringAMQP/image-20231202175627213.png" alt="image-20231202175627213"></p><h4 id="1-在consummer中编写消费者方法，监听direct-queue1和direct-queue2，并且使用-RabbitListener中声明Exchange、Queue、RoutingKey"><a href="#1-在consummer中编写消费者方法，监听direct-queue1和direct-queue2，并且使用-RabbitListener中声明Exchange、Queue、RoutingKey" class="headerlink" title="(1) 在consummer中编写消费者方法，监听direct.queue1和direct.queue2，并且使用@RabbitListener中声明Exchange、Queue、RoutingKey"></a>(1) 在consummer中编写消费者方法，监听direct.queue1和direct.queue2，并且使用@RabbitListener中声明Exchange、Queue、RoutingKey</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.ExchangeTypes;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> {<br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue(name = "direct.queue1"),</span><br><span class="hljs-meta">            exchange = @Exchange(name = "itcast.direct", type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">            key = {"red"}</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span>{<br>        System.out.println(<span class="hljs-string">"消费者收到direct.queue1的消息：【"</span> + msg + <span class="hljs-string">"】"</span>);<br>    }<br><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue(name = "direct.queue2"),</span><br><span class="hljs-meta">            exchange = @Exchange(name = "itcast.direct", type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">            key = {"blue"}</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue2</span><span class="hljs-params">(String msg)</span>{<br>        System.out.println(<span class="hljs-string">"消费者收到direct.queue2的消息：【"</span> + msg + <span class="hljs-string">"】"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="2-在publisher中发送消息"><a href="#2-在publisher中发送消息" class="headerlink" title="(2) 在publisher中发送消息"></a>(2) 在publisher中发送消息</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.spring;<br><br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> {<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendDirectExchange</span><span class="hljs-params">()</span>{<br>        <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"itcast.direct"</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">"hello, directExchange"</span>;<br>        rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">"blue"</span>, message);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="3-利用SpringAMQP演示TopicExchange的使用"><a href="#3-利用SpringAMQP演示TopicExchange的使用" class="headerlink" title="3. 利用SpringAMQP演示TopicExchange的使用"></a>3. 利用SpringAMQP演示TopicExchange的使用</h3><p><img src="/../post-images/SpringAMQP/image-20231202175837311.png" alt="image-20231202175837311"></p><p>TopicExchange实现方法与DirectExchange类似，只需要在key中使用通配符</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.ExchangeTypes;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> {<br>    <span class="hljs-comment">// topicExchange</span><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue(name = "topic.queue1"),</span><br><span class="hljs-meta">            exchange = @Exchange(name = "itcast.topic", type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">            key = "china.#"</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue1</span><span class="hljs-params">(String msg)</span>{<br>        System.out.println(<span class="hljs-string">"消费者收到direct.queue1的消息：【"</span> + msg + <span class="hljs-string">"】"</span>);<br>    }<br><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue(name = "topic.queue2"),</span><br><span class="hljs-meta">            exchange = @Exchange(name = "itcast.topic", type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">            key = "#.news"</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue2</span><span class="hljs-params">(String msg)</span>{<br>        System.out.println(<span class="hljs-string">"消费者收到direct.queue2的消息：【"</span> + msg + <span class="hljs-string">"】"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://www.xdqiang.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ入门</title>
    <link href="https://www.xdqiang.cn/RabbitMQ/"/>
    <id>https://www.xdqiang.cn/RabbitMQ/</id>
    <published>2023-10-28T14:48:00.000Z</published>
    <updated>2023-10-28T15:36:20.133Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RabbitMQ架构"><a href="#RabbitMQ架构" class="headerlink" title="RabbitMQ架构"></a>RabbitMQ架构</h1><ul><li><p>channel：操作MQ的工具</p></li><li><p>exchange：路由消息到队列中</p></li><li><p>queue：缓存消息</p></li><li><p>virtual host：虚拟主机，是对queue、exchange等资源的逻辑分组</p></li></ul><p><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028224717422.png" alt="image-20231028224717422"></p><h1 id="RabbitMQ入门"><a href="#RabbitMQ入门" class="headerlink" title="RabbitMQ入门"></a>RabbitMQ入门</h1><p>官方提供了入门教程<a href="https://www.rabbitmq.com/getstarted.html">RabbitMQ Tutorials — RabbitMQ</a></p><ol><li><p>基于队列：</p><ul><li>基本消息队列（BasicQueue）</li><li>工作消息队列（WorkQueue）<br><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028225642364.png"><br><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028225659082.png" alt="image-20231028225659082"></li></ul></li><li><p>发布订阅，根据交换机类型不同分为三种：</p><ul><li>Fanout Exchange：广播</li><li>Direct Exchange：路由</li><li>Topic Exchange：主题</li></ul></li></ol><p><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028230023129.png" alt="image-20231028230023129"></p><p><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028230038035.png" alt="image-20231028230038035"></p><h2 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例</h2><p>基于最基础的消息队列实现，只有三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接收并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><p><img src="/../post-images/MQ%E6%9E%B6%E6%9E%84/image-20231028230649805.png" alt="image-20231028230649805"></p><h3 id="基本消息队列的消息发送流程："><a href="#基本消息队列的消息发送流程：" class="headerlink" title="基本消息队列的消息发送流程："></a>基本消息队列的消息<strong>发送</strong>流程：</h3><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列</li><li>利用channel向队列发送消息</li></ol><h3 id="基本消息队列的消息接收流程："><a href="#基本消息队列的消息接收流程：" class="headerlink" title="基本消息队列的消息接收流程："></a>基本消息队列的消息<strong>接收</strong>流程：</h3><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列（生产者消费者均声明队列，避免队列不存在）</li><li>定义consumer的消费行为handleDelivery()</li><li>利用channel将consumer与队列绑定</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>生产者代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.helloworld;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PublisherTest</span> {<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException {<br>        <span class="hljs-comment">// 1.建立连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">"172.18.195.61"</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">"/"</span>);<br>        factory.setUsername(<span class="hljs-string">"xdqiang"</span>);<br>        factory.setPassword(<span class="hljs-string">"123321"</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 3.创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"simple.queue"</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4.发送消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">"hello, rabbitmq!"</span>;<br>        channel.basicPublish(<span class="hljs-string">""</span>, queueName, <span class="hljs-literal">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">"发送消息成功：【"</span> + message + <span class="hljs-string">"】"</span>);<br><br>        <span class="hljs-comment">// 5.关闭通道和连接</span><br>        channel.close();<br>        connection.close();<br><br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.helloworld;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerTest</span> {<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException {<br>        <span class="hljs-comment">// 1.建立连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">"172.18.195.61"</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">"/"</span>);<br>        factory.setUsername(<span class="hljs-string">"xdqiang"</span>);<br>        factory.setPassword(<span class="hljs-string">"123321"</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 3.创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">"simple.queue"</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4.订阅消息</span><br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel){<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope,</span><br><span class="hljs-params">                                       AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException {<br>                <span class="hljs-comment">// 5.处理消息</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body);<br>                System.out.println(<span class="hljs-string">"接收到消息：【"</span> + message + <span class="hljs-string">"】"</span>);<br>            }<br>        });<br>        System.out.println(<span class="hljs-string">"等待接收消息。。。。"</span>);<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://www.xdqiang.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ部署指南</title>
    <link href="https://www.xdqiang.cn/MessageQueue/"/>
    <id>https://www.xdqiang.cn/MessageQueue/</id>
    <published>2023-10-28T13:36:00.000Z</published>
    <updated>2023-10-28T15:44:46.885Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-单机部署"><a href="#1-单机部署" class="headerlink" title="1.单机部署"></a>1.单机部署</h1><p>我们在Centos7虚拟机中使用Docker来安装。</p><h2 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1.下载镜像"></a>1.1.下载镜像</h2><p>方式一：在线拉取</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull rabbitmq:3-management<br></code></pre></td></tr></tbody></table></figure><p>方式二：从本地加载</p><p>在课前资料已经提供了镜像包：</p><p><img src="/../post-images/MessageQueue/image-20210423191210349-1698500977836-1.png" alt="image-20210423191210349"></p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i mq.tar<br></code></pre></td></tr></tbody></table></figure><h2 id="1-2-安装MQ"><a href="#1-2-安装MQ" class="headerlink" title="1.2.安装MQ"></a>1.2.安装MQ</h2><p>执行下面的命令来运行MQ容器：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br> -e RABBITMQ_DEFAULT_USER=xdqiang \<br> -e RABBITMQ_DEFAULT_PASS=123321 \<br> --name mq \<br> --hostname mq1 \<br> -p 15672:15672 \<br> -p 5672:5672 \<br> -d \<br> rabbitmq:3-management<br></code></pre></td></tr></tbody></table></figure><blockquote><p>运行完成后直接访问localhost:15672发现打不开网页,登录mq容器内执行:rabbitmq-plugins enable rabbitmq_management 后再次访问</p></blockquote><h1 id="2-集群部署"><a href="#2-集群部署" class="headerlink" title="2.集群部署"></a>2.集群部署</h1><p>接下来，我们看看如何安装RabbitMQ的集群。</p><h2 id="2-1-集群分类"><a href="#2-1-集群分类" class="headerlink" title="2.1.集群分类"></a>2.1.集群分类</h2><p>在RabbitMQ的官方文档中，讲述了两种集群的配置方式：</p><ul><li>普通模式：普通模式集群不进行数据同步，每个MQ都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有2个MQ：mq1，和mq2，如果你的消息在mq1，而你连接到了mq2，那么mq2会去mq1拉取消息，然后返回给你。如果mq1宕机，消息就会丢失。</li><li>镜像模式：与普通模式不同，队列会在各个mq的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li></ul><p>我们先来看普通模式集群。</p><h2 id="2-2-设置网络"><a href="#2-2-设置网络" class="headerlink" title="2.2.设置网络"></a>2.2.设置网络</h2><p>首先，我们需要让3台MQ互相知道对方的存在。</p><p>分别在3台机器中，设置 /etc/hosts文件，添加如下内容：</p><figure class="highlight accesslog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.150.101</span> mq1<br><span class="hljs-number">192.168.150.102</span> mq2<br><span class="hljs-number">192.168.150.103</span> mq3<br></code></pre></td></tr></tbody></table></figure><p>并在每台机器上测试，是否可以ping通对方：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://www.xdqiang.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>HEXO + Github Pages + 百度主动推送</title>
    <link href="https://www.xdqiang.cn/baidu-seo/"/>
    <id>https://www.xdqiang.cn/baidu-seo/</id>
    <published>2023-10-22T13:35:56.000Z</published>
    <updated>2023-10-28T13:28:43.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-在百度站长平台添加站点"><a href="#1-在百度站长平台添加站点" class="headerlink" title="1. 在百度站长平台添加站点"></a>1. 在百度站长平台添加站点</h1><p>1.1. 打开<a href="https://ziyuan.baidu.com/site/index#/">站点管理_站长工具_百度搜索资源平台</a>，在用户中心站点管理中添加网站：</p><p><img src="/../post-images/BaiduPush/BaiduPush-01.png"></p><p>1.2. 输入网站域名，一定要清楚自己的域名是<code>https://</code>还是<code>https://www</code>，不确定的话就在浏览器访问一次，看看加载成功后最终的地址。（输错的话后面步骤<code>1.4.验证网站</code>会不通过）</p><p><img src="/../post-images/BaiduPush/BaiduPush-02.png"></p><p>1.3. 站点属性：根据需求，随便选。</p><p><img src="/../post-images/BaiduPush/BaiduPush-03.png"></p><p>1.4. 验证网站</p><p>这里两种验证方式都是同样原理，建议选更简单的<code>文件验证</code>方式。</p><p>点击蓝色<code>下载验证文件</code>按钮，并将下载后的文件复制到HEXO目录中的source文件夹中。</p><p><img src="/../post-images/BaiduPush/BaiduPush-04.png"></p><p><strong>重点：</strong> 在执行<code>hexo g</code> 时，source文件夹中的.html文件会被渲染，渲染后文件内容会发生变化，导致百度验证失败。为了避免渲染，在<code>_config.yml</code>配置文件中添加忽略项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">skip_render:</span>  <span class="hljs-comment"># 跳过渲染</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">baidu_verify_codeva-vCqga8k0Pw.html</span><br></code></pre></td></tr></tbody></table></figure><p>上传文件、修改<code>_config.yml</code>配置后，应该执行以下操作进行部署到github pages：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></tbody></table></figure><p>部署成功后，点击蓝色<code>点击这里</code>，访问刚刚上传的.html验证文件，应该可以正常访问。然后点击<code>完成验证</code>。</p><p><strong>注意：</strong> 如果<code>步骤1.2</code>出错，会验证失败：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">xxx前www.xxx.com使用文件验证<br><br>原因：301网页存在跳转。<br><br>问题分析&amp;解决办法：验证文件、网页必须为200状态码，请检查网站协议头是否选择正确...<br></code></pre></td></tr></tbody></table></figure><p><img src="/../post-images/BaiduPush/BaiduPush-05.png"></p><p>出现此错误时，可以去检查<code>步骤1.2</code>，确认域名为<code>https://</code>还是<code>https://www</code>。</p><p>1.5. 进入<code>普通提交 -&gt; 资源提交 -&gt; API提交</code>查看token值。</p><p><img src="/../post-images/BaiduPush/BaiduPush-06.png"></p><h1 id="2-安装插件hexo-baidu-url-submit"><a href="#2-安装插件hexo-baidu-url-submit" class="headerlink" title="2. 安装插件hexo-baidu-url-submit"></a>2. 安装插件hexo-baidu-url-submit</h1><p>2.1. 在HEXO根目录下执行命令：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-baidu-url-submit --save<br></code></pre></td></tr></tbody></table></figure><p>2.2. 并在博客配置文件<code>_config.yml</code>中添加以下配置：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">baidu_url_submit:</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 每次提交最新的三个链接</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">xdqiang.cn</span> <span class="hljs-comment"># 在百度站长平台中注册的域名</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">your_token</span> <span class="hljs-comment"># 步骤1.5中的token</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidu_urls.txt</span> <span class="hljs-comment"># 文本文档的地址， 新链接会保存在此文本文档里（hexo-baidu-url-submit插件自动生成）</span><br></code></pre></td></tr></tbody></table></figure><p>2.3. 由于HEXO默认文章路径太深，不利于百度SEO，可以将文章路径(permalink)修改为标题（建议）：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://xdqiang.cn</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing 'index.html' from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing '.html' from permalinks</span><br></code></pre></td></tr></tbody></table></figure><p>2.4. 在deployer中添加<code>baidu_url_submitter</code>:</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xxxxxx/xxxxxxx.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">baidu_url_submittertter</span><br></code></pre></td></tr></tbody></table></figure><p>2.5. 修改完配置后，执行以下命令部署博客：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="SEO" scheme="https://www.xdqiang.cn/tags/SEO/"/>
    
    <category term="百度" scheme="https://www.xdqiang.cn/tags/%E7%99%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>NGAP接口概述</title>
    <link href="https://www.xdqiang.cn/NGAP/"/>
    <id>https://www.xdqiang.cn/NGAP/</id>
    <published>2023-10-21T12:56:00.000Z</published>
    <updated>2023-10-28T13:30:24.016Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、NGAP-N2-接口协议概述"><a href="#一、NGAP-N2-接口协议概述" class="headerlink" title="一、NGAP(N2)接口协议概述"></a>一、NGAP(N2)接口协议概述</h1><p>N2的传输层是SCTP，上层用户是5G NAS</p><ul><li><p>MM</p></li><li><p>SM</p></li></ul><p>NGAP具备以下能力：</p><ul><li><p>支持建立、保持和释放PDU会话的NG-RAN侧的能力</p></li><li><p>支持intra-RAT和inter-RAT的切换</p></li><li><p>传递UE和AMF之间的NAS信令</p></li><li><p>用户数据报文的资源预留机制</p></li><li><p>能在协议栈上区分出不同用户，并完成UE相关的信令管理</p><p><img src="/../post-images/NGAP/NGAP-01.png"></p></li></ul><h1 id="二、NGAP接口流程分类"><a href="#二、NGAP接口流程分类" class="headerlink" title="二、NGAP接口流程分类"></a>二、NGAP接口流程分类</h1><h2 id="按照是否和UE相关分类"><a href="#按照是否和UE相关分类" class="headerlink" title="按照是否和UE相关分类"></a>按照是否和UE相关分类</h2><ul><li><p>与UE相关的流程，重要的有：</p><ul><li><p>PDU会话管理流程</p></li><li><p>UE上下文管理流程</p></li><li><p>UE移动性管理流程</p></li><li><p>寻呼流程</p></li><li><p>NAS消息传送流程</p></li></ul></li><li><p>与UE无关的流程，重要的有：</p><ul><li>N2 Setup</li></ul><p><img src="/../post-images/NGAP/NGAP-02.png"></p></li></ul><h2 id="按照是否需要应答分类"><a href="#按照是否需要应答分类" class="headerlink" title="按照是否需要应答分类"></a>按照是否需要应答分类</h2><ul><li><p>需要应答的流程有：</p><p><img src="/../post-images/NGAP/NGAP-03.png"></p><p><img src="/../post-images/NGAP/NGAP-04.png"></p></li><li><p>不需要应答的流程有（大部分是UE无关的流程）：</p><p><img src="/../post-images/NGAP/NGAP-05.png"></p></li></ul><h1 id="三、常见N2接口流程业务串联"><a href="#三、常见N2接口流程业务串联" class="headerlink" title="三、常见N2接口流程业务串联"></a>三、常见N2接口流程业务串联</h1><h2 id="PDU会话建立流程"><a href="#PDU会话建立流程" class="headerlink" title="PDU会话建立流程"></a>PDU会话建立流程</h2><ol><li><p>Step 1：在UE还没来之前，gNB要和AMF池组中所有AMF建立N2关联</p><p>用到的是NG Setup流程，该流程中gNB会和所有AMF建立SCTP偶联，并获取AMF的权重等参数，用于后续的AMF选择。NG Setup流程包括：</p><ul><li><p>NG Setup Request</p></li><li><p>NG Setup Response</p></li></ul><p><img src="/../post-images/NGAP/NGAP-06.png"></p></li><li><p>Step 2：NG建链后即可为UE服务。UE发起注册流程，gNB配合AMF建立UE的上下文（包括允许的NSSAI、GUAMI、UE安全能力、移动性限制列表等参数）。涉及的消息包括：</p><ul><li><p>Initial UE Message</p></li><li><p>UPLINK NAS TRANSPORT</p></li><li><p>DOWNLINK NAS TRANSPORT</p></li><li><p>initial Context Setup Request</p></li><li><p>initial Context Setup Response</p></li></ul><p><img src="/../post-images/NGAP/NGAP-07.png"></p></li><li><p>Step 3：UE发起PDU会话建立流程。gNB根据网络侧的要求，为UE分配和这个PDU会话及Qos Flow相关的资源（如DRB）。涉及的流程有：</p><ul><li><p>PDU Session Resource Setup Request</p></li><li><p>PDU Session Resource Setup Response</p></li><li><p>UPLINK NAS TRANSPORT</p></li><li><p>DOWNLINK NAS TRANSPORT</p></li></ul><p><img src="/../post-images/NGAP/NGAP-08.png"></p></li><li><p>PDU会话建立后常见的N2流程，如：</p><ul><li><p>移动到其他gNB，触发N2或Xn切换流程；</p></li><li><p>不上网了，释放PDU会话，触发PDU会话资源释放流程；</p></li><li><p>空闲状态下有下行数据到达，触发Paging（寻呼）流程；</p></li><li><p>网络侧决定调整UE的Qos或其他参数，触发PDU会话资源修改</p></li><li><p>其他辅助和管理（OAM）流程。</p></li></ul></li></ol><h1 id="四、附录-N2典型流程举例"><a href="#四、附录-N2典型流程举例" class="headerlink" title="四、附录: N2典型流程举例"></a>四、附录: N2典型流程举例</h1><h2 id="PDU会话管理流程"><a href="#PDU会话管理流程" class="headerlink" title="PDU会话管理流程"></a>PDU会话管理流程</h2><ol><li><p>PDU会话管理流程为某个PDU会话的特定Qos Flow分配Uu和N3口的资源，并且针对该UE建立相应的DRB</p></li><li><p>需要注意，消息是发给AMF，但是因为和PDU会话相关，都是发给SMF处理的</p><p><img src="/../post-images/NGAP/NGAP-09.png"></p></li><li><p>PDU会话管理流程通常不单独出现，而作为一个大流程的一部分。例如PDU会话资源建立流程，就是PDU会话建立流程的一部分。摘取相关的部分如下：</p><p><img src="/../post-images/NGAP/NGAP-10.png"></p></li></ol><h2 id="UE上下文管理流程"><a href="#UE上下文管理流程" class="headerlink" title="UE上下文管理流程"></a>UE上下文管理流程</h2><p><img src="/../post-images/NGAP/NGAP-11.png"></p><h2 id="UE移动性管理流程"><a href="#UE移动性管理流程" class="headerlink" title="UE移动性管理流程"></a>UE移动性管理流程</h2><p><img src="/../post-images/NGAP/NGAP-12.png"></p><h2 id="寻呼流程"><a href="#寻呼流程" class="headerlink" title="寻呼流程"></a>寻呼流程</h2><p><img src="/../post-images/NGAP/NGAP-13.png"></p><h2 id="NAS消息传送流程"><a href="#NAS消息传送流程" class="headerlink" title="NAS消息传送流程"></a>NAS消息传送流程</h2><p><img src="/../post-images/NGAP/NGAP-14.png"></p><h2 id="接口管理流程"><a href="#接口管理流程" class="headerlink" title="接口管理流程"></a>接口管理流程</h2><p><img src="/../post-images/NGAP/NGAP-15.png"></p><h2 id="配置传递流程"><a href="#配置传递流程" class="headerlink" title="配置传递流程"></a>配置传递流程</h2><p><img src="/../post-images/NGAP/NGAP-16.png"></p><h2 id="警报消息传送流程"><a href="#警报消息传送流程" class="headerlink" title="警报消息传送流程"></a>警报消息传送流程</h2><p><img src="/../post-images/NGAP/NGAP-17.png"></p><h2 id="NRPPa传送流程"><a href="#NRPPa传送流程" class="headerlink" title="NRPPa传送流程"></a>NRPPa传送流程</h2><p><img src="/../post-images/NGAP/NGAP-18.png"></p><h2 id="Trace（跟踪）流程"><a href="#Trace（跟踪）流程" class="headerlink" title="Trace（跟踪）流程"></a>Trace（跟踪）流程</h2><p><img src="/../post-images/NGAP/NGAP-19.png"></p><h2 id="位置报告流程"><a href="#位置报告流程" class="headerlink" title="位置报告流程"></a>位置报告流程</h2><p><img src="/../post-images/NGAP/NGAP-20.png"></p><h2 id="UE-TNLA绑定流程"><a href="#UE-TNLA绑定流程" class="headerlink" title="UE TNLA绑定流程"></a>UE TNLA绑定流程</h2><p><img src="/../post-images/NGAP/NGAP-21.png"></p><h2 id="UE无线能力管理流程"><a href="#UE无线能力管理流程" class="headerlink" title="UE无线能力管理流程"></a>UE无线能力管理流程</h2><p><img src="/../post-images/NGAP/NGAP-22.png"></p><h2 id="Secondary-RAT数据使用量上报流程"><a href="#Secondary-RAT数据使用量上报流程" class="headerlink" title="Secondary RAT数据使用量上报流程"></a>Secondary RAT数据使用量上报流程</h2><p><img src="/../post-images/NGAP/NGAP-23.png"></p><h2 id="NGAP典型消息举例"><a href="#NGAP典型消息举例" class="headerlink" title="NGAP典型消息举例"></a>NGAP典型消息举例</h2><p><img src="/../post-images/NGAP/NGAP-24.png"></p><p><img src="/../post-images/NGAP/NGAP-25.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="5GC" scheme="https://www.xdqiang.cn/tags/5GC/"/>
    
  </entry>
  
  <entry>
    <title>OAI开源核心网部署</title>
    <link href="https://www.xdqiang.cn/oai-kai-yuan-he-xin-wang-bu-shu/"/>
    <id>https://www.xdqiang.cn/oai-kai-yuan-he-xin-wang-bu-shu/</id>
    <published>2023-10-20T14:45:17.000Z</published>
    <updated>2023-10-28T13:30:06.047Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="OAI概述"><a href="#OAI概述" class="headerlink" title="OAI概述"></a>OAI概述</h1><p>OAI-5G核心网络（CN）项目组的目标是提供具有丰富功能集的符合3GPP标准的5G独立（SA）CN实现。OAI 5G CN以灵活的方式设计和实现，可以轻松适应多样化5G用例的需求。OAI 5G CN组件的所有功能都通过专业测试人员、商业gNB（带有COTS UE）和开源RAN模拟器进行持续测试。<br><img src="/../post-images/OAI/1697732953367.png"></p><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull ubuntu:bionic<br><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">8</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure><h1 id="二、拉取Docker镜像"><a href="#二、拉取Docker镜像" class="headerlink" title="二、拉取Docker镜像"></a>二、拉取Docker镜像</h1><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-amf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-nrf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-spgwu-tiny:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-smf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-udr:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-udm:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-ausf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-upf-vpp:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-nssf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-pcf:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/oai-nef:v1.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">docker</span> pull oaisoftwarealliance/trf-gen-cn5g:latest<br></code></pre></td></tr></tbody></table></figure><h1 id="三、克隆oai-cn5g-fed项目源代码"><a href="#三、克隆oai-cn5g-fed项目源代码" class="headerlink" title="三、克隆oai-cn5g-fed项目源代码"></a>三、克隆oai-cn5g-fed项目源代码</h1><ol><li><p>拉取源代码<br><code>git clone --branch v1.5.0 https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed.git</code></p></li><li><p>同步git子模块<br><code>cd oai-cn5g-fed</code><br><code>./scripts/syncComponents.sh</code></p><h1 id="四、创建网桥"><a href="#四、创建网桥" class="headerlink" title="四、创建网桥"></a>四、创建网桥</h1></li><li><p>创建<br><code>docker network create --driver=bridge --subnet=192.168.70.128/26 -o          "com.docker.network.bridge.name"="demo-oai" demo-oai-public-net</code></p></li><li><p>查看<br><code> ifconfig demo-oai</code><br><code>docker network ls</code><br>注意：删除网桥：<br><code>docker network rm demo-oai-public-net</code></p><h1 id="五、包转发配置"><a href="#五、包转发配置" class="headerlink" title="五、包转发配置"></a>五、包转发配置</h1><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo sysctl net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.all</span>.forwarding=<span class="hljs-number">1</span><br>sudo iptables -P FORWARD ACCEPT<br></code></pre></td></tr></tbody></table></figure><h1 id="七、-模拟基站和终端接入测试"><a href="#七、-模拟基站和终端接入测试" class="headerlink" title="七、 模拟基站和终端接入测试"></a>七、 模拟基站和终端接入测试</h1></li><li><p>拉取ueransim容器镜像<br><code>docker pull rohankharade/ueransim</code><br><code>docker image tag rohankharade/ueransim:latest ueransim:latest</code></p></li><li><p>5GC部署<br><code>cd oai-cn5g-fed/docker-compose</code><br><code> docker-compose -f docker-compose-basic-vpp-nrf.yaml up -d</code><br>如果报错，请删除现有容器：</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 网络修剪</span><br>docker network prune<br><span class="hljs-comment"># 查看现有容器</span><br>docker container <span class="hljs-built_in">ls</span> <span class="hljs-literal">-a</span><br><span class="hljs-comment"># 删除所有容器</span><br>docker <span class="hljs-built_in">rm</span> <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-qa</span>) 或者 docker system prune<br></code></pre></td></tr></tbody></table></figure></li><li><p>启动UERANSIM<br><code>docker-compose -f docker-compose-ueransim-vpp.yaml up -d</code></p></li><li><p>取消部署<br><code>docker-compose -f docker-compose-ueransim-vpp.yaml down</code><br><code>python3 ./core-network.py --type stop-basic-vpp --scenario 1</code></p><h1 id="八、其他常用指令"><a href="#八、其他常用指令" class="headerlink" title="八、其他常用指令"></a>八、其他常用指令</h1><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 停止所有容器</span><br>docker stop <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span> <span class="hljs-literal">-q</span>)<br><span class="hljs-comment"># 抓包</span><br>tshark <span class="hljs-literal">-i</span> demo<span class="hljs-literal">-oai</span> <span class="hljs-operator">-f</span> <span class="hljs-string">"not arp and not port 53 and not host archive.ubuntu.com and not host security.ubuntu.com"</span> <span class="hljs-literal">-w</span> logs.pcap<br>sudo tcpdump <span class="hljs-literal">-i</span> demo<span class="hljs-literal">-oai</span> <span class="hljs-literal">-w</span> logs.pcap<br></code></pre></td></tr></tbody></table></figure><h1 id="九、OAI网元IP"><a href="#九、OAI网元IP" class="headerlink" title="九、OAI网元IP"></a>九、OAI网元IP</h1><table><thead><tr><th>Container</th><th>Ip-address</th></tr></thead><tbody><tr><td>mysql</td><td>192.168.70.131</td></tr><tr><td>oai-amf</td><td>192.168.70.132</td></tr><tr><td>oai-smf</td><td>192.168.70.133</td></tr><tr><td>oai-nrf</td><td>192.168.70.130</td></tr><tr><td>oai-spgwu</td><td>192.168.70.134</td></tr><tr><td>oai-ext-dn</td><td>192.168.70.135</td></tr></tbody></table></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="5GC" scheme="https://www.xdqiang.cn/tags/5GC/"/>
    
  </entry>
  
</feed>
